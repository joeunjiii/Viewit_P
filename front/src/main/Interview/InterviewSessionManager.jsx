import React, { useEffect, useRef, useState } from "react";
import MicRecorder from "./asset/Mic/MicRecorder";
import { requestNextTTSQuestion, requestTTS } from "./api/tts";
import { requestSpeechToText } from "./api/stt";
import Timer from "./asset/Timer";

const PHASE = {
  IDLE: "idle",  
  READY: "ready",         // Ï§ÄÎπÑ(ÏãúÏûë)
  TTS: "tts",             // ÏßàÎ¨∏ ÏùåÏÑ± Ïû¨ÏÉù
  WAITING: "wait",        // ÎåÄÍ∏∞ÏãúÍ∞Ñ
  RECORDING: "recording", // ÎãµÎ≥Ä ÎÖπÏùå
  UPLOADING: "uploading", // ÏóÖÎ°úÎìú
  COMPLETE: "complete",   // Îã§Ïùå ÏßàÎ¨∏ ÎåÄÍ∏∞
};

function InterviewSessionManager({
  startInterview = false,
  waitTime = 3,
  answerDuration = 10,
  allowRetry = true,
  onStatusChange,
  onTimeUpdate,
  onAnswerComplete,
}) {
  const [phase, setPhase] = useState(PHASE.READY);
  const [question, setQuestion] = useState(null);
  const [remainingTime, setRemainingTime] = useState(0);
  const [sttResult, setSttResult] = useState(null);

  const timerRef = useRef(null);
  const recorderRef = useRef(null);
  const audioRef = useRef(null);

  useEffect(() => {
    if (startInterview && phase === PHASE.IDLE) {
      console.log("üöÄ InterviewSessionManager: Î©¥Ï†ë ÏãúÏûë Ïã†Ìò∏ Í∞êÏßÄ, READYÎ°ú Ï†ÑÌôò");
      setPhase(PHASE.READY);
    }
  }, [startInterview, phase]);
  
  // phase Î∞îÎÄî ÎïåÎßàÎã§ Î°úÏßÅ Î∂ÑÍ∏∞(useEffect 1Í∞ú)
  useEffect(() => {
    onStatusChange?.(phase);
    // Í≥µÌÜµ: ÌÉÄÏù¥Î®∏ Ìï≠ÏÉÅ Ï†ïÎ¶¨
    clearInterval(timerRef.current);

    switch (phase) {
      case PHASE.IDLE:
        // startInterviewÍ∞Ä trueÍ∞Ä ÎêòÍ∏∞ Ï†ÑÍπåÏßÄ ÎåÄÍ∏∞
        break;
      case PHASE.READY:
        // 1. ÏßàÎ¨∏+TTS URL ÏöîÏ≤≠
        (async () => {
          let result;
          if (!question) {
            const audioUrl = await requestTTS();
            result = { audioUrl, question: "ÏûêÍ∏∞ÏÜåÍ∞ú Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§." };
          } else {
            result = await requestNextTTSQuestion();
          }
          setQuestion(result);
          setPhase(PHASE.TTS);
        })();
        break;

      case PHASE.TTS:
        // 2. Ïò§ÎîîÏò§ Ïû¨ÏÉù
        if (question?.audioUrl) {
          if (audioRef.current) {
            audioRef.current.pause();
            audioRef.current = null;
          }
          const audio = new Audio("http://localhost:8000" + question.audioUrl);
          audioRef.current = audio;
          audio.onended = () => setPhase(PHASE.WAITING);
          audio.play().catch(() => setPhase(PHASE.WAITING)); // Ïã§Ìå® ÏãúÎèÑ WAITING
        }
        break;

      case PHASE.WAITING:
        // 3. ÎåÄÍ∏∞ ÌÉÄÏù¥Î®∏ ÏãúÏûë
        setRemainingTime(waitTime);
        onTimeUpdate?.(waitTime);
        timerRef.current = setInterval(() => {
          setRemainingTime((prev) => {
            onTimeUpdate?.(prev - 1);
            if (prev <= 1) {
              clearInterval(timerRef.current);
              setPhase(PHASE.RECORDING);
              return 0;
            }
            return prev - 1;
          });
        }, 1000);
        break;

      case PHASE.RECORDING:
        // 4. ÎÖπÏùå ÏãúÏûë + ÎãµÎ≥Ä ÌÉÄÏù¥Î®∏
        // setRemainingTime(answerDuration);
        // onTimeUpdate?.(answerDuration);
        recorderRef.current?.start && recorderRef.current.start();
        // timerRef.current = setInterval(() => {
        //   setRemainingTime((prev) => {
        //     onTimeUpdate?.(prev - 1);
        //     if (prev <= 1) {
        //       clearInterval(timerRef.current);
        //       setPhase(PHASE.UPLOADING);
        //       recorderRef.current?.stop();
        //       return 0;
        //     }
        //     return prev - 1;
        //   });
        // }, 1000);
        break;

      case PHASE.UPLOADING:
        // 5. ÏóÖÎ°úÎìú(ÎÖπÏùå Ï¢ÖÎ£å ÌõÑ handleRecordingCompleteÏóêÏÑú phase Ï†ÑÏù¥)
        break;

      case PHASE.COMPLETE:
        // 6. Îã§Ïùå ÏßàÎ¨∏ ÎåÄÍ∏∞(1Ï¥à ÌõÑ ÏûêÎèô)
        setTimeout(() => setPhase(PHASE.READY), 1000);
        break;

      default:
        break;
    }

    // Clean-up: phase Î∞îÎÄî ÎïåÎßàÎã§ ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    return () => clearInterval(timerRef.current);

    // eslint-disable-next-line
  }, [phase]); // phaseÎßå Í∞êÏãú!

  // ÎãµÎ≥Ä ÎÖπÏùå ÎÅù ‚Üí ÏÑúÎ≤Ñ Ï†ÑÏÜ°
  const handleRecordingComplete = async (blob) => {

    //Ïûò Îì§Î¶¨ÎäîÏßÄ ÌôïÏù∏Ìïú ÏΩîÎìú Í∞úÎ∞úÏ§ëÏóêÎäî ÎëêÍ≥† ÎÇòÏ§ëÏóê ÏßÄÏö∞Í∏∞
    console.log("ÎÖπÏùå Í≤∞Í≥º Blob:", blob, "size:", blob.size, "type:", blob.type);
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = 'ÎÖπÏùå_Í≤∞Í≥º.webm'; // ÌååÏùº Ïù¥Î¶Ñ
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);

    //Ïã§Ï†ú ÏÑúÎ≤ÑÏóÖÎ°úÎìú
    // 2. FastAPI ÏÑúÎ≤ÑÎ°ú ÏùåÏÑ± ÌååÏùº ÏóÖÎ°úÎìú Î∞è STT Î≥ÄÌôò ÏöîÏ≤≠
    console.log("üîÑ [UPLOADING] ÏÑúÎ≤ÑÏóê ÌååÏùº ÏóÖÎ°úÎìú Ï§ë...");
    setPhase(PHASE.UPLOADING); // (Î°úÎî© ÌëúÏãú Îì±)
    try {
      const data = await requestSpeechToText(blob); // Ïù¥ Ìïú Ï§ÑÎ°ú OK!
      setSttResult(data.text);
      console.log("‚úÖ [COMPLETE] Î≥ÄÌôò Í≤∞Í≥º ÏàòÏã†:", data.text);
      setPhase(PHASE.COMPLETE);
    } catch (err) {
      console.error("STT Ïò§Î•ò:", err);
    }
    
  };

  // STT Í≤∞Í≥º ‚Üí Î∂ÄÎ™®Î°ú Ï†ÑÎã¨
  useEffect(() => {
    if (phase === PHASE.COMPLETE && sttResult) {
      console.log("üéâ [COMPLETE] ÌîÑÎ°†Ìä∏Ïóê Í≤∞Í≥º Ï†ÑÎã¨:", sttResult);
      onAnswerComplete?.(sttResult); // Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ï†ÑÎã¨ Îì±
      setSttResult(null);
      // ÎòêÎäî Í≤∞Í≥º UIÏóê ÌëúÏãú
      // Í∑∏ ÌõÑ Îã§Ïùå ÏßàÎ¨∏ Ï§ÄÎπÑ(phase READYÎ°ú Ïû¨Ï†ÑÌôò)
    }
  }, [phase, sttResult, onAnswerComplete]);

  // Îã§Ïãú ÎãµÎ≥ÄÌïòÍ∏∞
  const handleRetry = () => {
    setRemainingTime(waitTime);
    setPhase(PHASE.WAITING);
  };

  // UI Î†åÎçî
  return (
    <div className="interview-session">
      <MicRecorder
        ref={recorderRef}
        isRecording={phase === PHASE.RECORDING}
        onStop={handleRecordingComplete}
      />

      {phase === PHASE.WAITING && (
        <div className="timer-area">
          <Timer
            duration={remainingTime}
            autoStart={true}
            label="ÎåÄÍ∏∞ÏãúÍ∞Ñ"
          />
          {allowRetry && (
            <div style={{ display: "flex", gap: "10px", marginTop: "20px" }}>
              <button className="replay-button" onClick={handleRetry}>
                Îã§Ïãú ÎãµÎ≥ÄÌïòÍ∏∞
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default InterviewSessionManager;
