from fastapi import APIRouter, UploadFile, File
import shutil
import os
from services.whisper_service import model  # Î™®Îç∏Îßå import
import subprocess
import asyncio
import anyio
import time
router = APIRouter()

WEBM_DIR = "./interview/uploads/webm"
WAV_DIR = "./interview/uploads/wav"
FFMPEG_BIN_PATH = r"C:\Program Files\ffmpeg-7.0.2-essentials_build\bin\ffmpeg.exe" # <--- Ïù¥ Ï§ÑÏùÑ Ï∂îÍ∞ÄÌïòÍ≥† Í≤ΩÎ°úÎ•º ÏàòÏ†ïÌïòÏÑ∏Ïöî!
os.makedirs(WEBM_DIR, exist_ok=True)
os.makedirs(WAV_DIR, exist_ok=True)

# ÏÑúÎ≤Ñ ÏãúÏûë Ïãú ÌòÑÏû¨ ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨ Î∞è Ï†àÎåÄ Í≤ΩÎ°ú Ï∂úÎ†• (Ï†ïÎ≥¥ ÌôïÏù∏Ïö©)
print(f"Server CWD: {os.getcwd()}")
print(f"WEBM_DIR absolute path: {os.path.abspath(WEBM_DIR)}")
print(f"WAV_DIR absolute path: {os.path.abspath(WAV_DIR)}")


@router.post("/stt")
async def speech_to_text(audio: UploadFile = File(...)):
    # ÌååÏùº Ïù¥Î¶ÑÏùÑ Í≥†Ï†ïÌïòÍ≥† Í≤ΩÎ°úÎ•º ÏßÅÏ†ë ÏÑ§Ï†ï
    filename_safe = os.path.basename(audio.filename) # ÌååÏùºÎ™ÖÏóêÏÑú Í≤ΩÎ°ú Ï†ïÎ≥¥ Ï†úÍ±∞ (Î≥¥Ïïà)
    webm_path = os.path.join(WEBM_DIR, filename_safe)
    wav_name = filename_safe.rsplit(".", 1)[0] + ".wav" # ÌôïÏû•ÏûêÎ•º .wavÎ°ú Î≥ÄÍ≤Ω
    wav_path = os.path.join(WAV_DIR, wav_name)

    print(f"Ï†ÄÏû• ÏãúÎèÑ Í≤ΩÎ°ú (WebM): {os.path.abspath(webm_path)}")
    print(f"Î≥ÄÌôòÎê† WAV Í≤ΩÎ°ú: {os.path.abspath(wav_path)}")
    print(f"ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Î∞õÏùÄ ÌååÏùº Ïù¥Î¶Ñ: {audio.filename}")

    try:
        # 1. webm ÌååÏùº Ï†ÄÏû•
        # audio.fileÏùò Ìè¨Ïù∏ÌÑ∞Î•º ÌååÏùº ÏãúÏûëÏ†êÏúºÎ°ú ÎèåÎ¶ΩÎãàÎã§.
        # (shutil.copyfileobjÎäî ÌòÑÏû¨ Ìè¨Ïù∏ÌÑ∞Î∂ÄÌÑ∞ ÏùΩÍ∏∞ ÎïåÎ¨∏Ïóê Ï§ëÏöîÌï©ÎãàÎã§.)
        audio.file.seek(0)
        with open(webm_path, "wb") as buffer:
            shutil.copyfileobj(audio.file, buffer)
        print(f"‚úÖ WEBM Ï†ÄÏû• ÏôÑÎ£å: {webm_path}")
        # --- Ï†ÄÏû•Îêú ÌååÏùº Ï°¥Ïû¨ Ïó¨Î∂Ä Î∞è ÌÅ¨Í∏∞ ÌôïÏù∏ (ÎîîÎ≤ÑÍπÖÏö©, ÌïÑÏöî ÏóÜÏúºÎ©¥ ÏÇ≠Ï†ú) ---
        if os.path.exists(webm_path):
            saved_webm_size = os.path.getsize(webm_path)
            print(f"üí° Ï†ÄÏû•Îêú WEBM ÌååÏùº Ïã§Ï†ú Ï°¥Ïû¨ ÌôïÏù∏: True, ÌÅ¨Í∏∞: {saved_webm_size} bytes")
            if saved_webm_size == 0:
                print("‚ö†Ô∏è Í≤ΩÍ≥†: Ï†ÄÏû•Îêú WEBM ÌååÏùº ÌÅ¨Í∏∞Í∞Ä 0ÏûÖÎãàÎã§. ÎÇ¥Ïö©Ïù¥ ÎπÑÏñ¥ÏûàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.")
        else:
            print("‚ùå Ïã¨Í∞Å: WEBM ÌååÏùºÏù¥ Ï†ÄÏû• ÏôÑÎ£å Î©îÏãúÏßÄÏóêÎèÑ Î∂àÍµ¨ÌïòÍ≥† Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
        # --------------------------------------------------------

        # 2. FFmpegÎ°ú WAV Î≥ÄÌôò
        print("üîÑ FFmpeg Î≥ÄÌôò ÏãúÏûë")
        # FFMPEG_BIN_PATH Î≥ÄÏàòÎ•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.
        ffmpeg_cmd = [FFMPEG_BIN_PATH, "-y", "-i", webm_path, wav_path] # <--- Ïù¥ Î∂ÄÎ∂ÑÏùÄ Ïù¥ÎØ∏ ÏàòÏ†ïÎêòÏñ¥ ÏûàÏùÑ Í≤ÅÎãàÎã§.

        ffmpeg_result = await anyio.to_thread.run_sync(
            lambda: subprocess.run(ffmpeg_cmd, check=True, capture_output=True, text=True)
        )
        print(f"‚úÖ WAV Î≥ÄÌôò ÏôÑÎ£å: {wav_path}")
        print(f"FFmpeg stdout: {ffmpeg_result.stdout.strip()}")
        print(f"FFmpeg stderr: {ffmpeg_result.stderr.strip()}")

        if os.path.exists(wav_path):
            saved_wav_size = os.path.getsize(wav_path)
            print(f"üí° Î≥ÄÌôòÎêú WAV ÌååÏùº Ïã§Ï†ú Ï°¥Ïû¨ ÌôïÏù∏: True, ÌÅ¨Í∏∞: {saved_wav_size} bytes")
            if saved_wav_size == 0:
                print("‚ö†Ô∏è Í≤ΩÍ≥†: Î≥ÄÌôòÎêú WAV ÌååÏùº ÌÅ¨Í∏∞Í∞Ä 0ÏûÖÎãàÎã§. Î≥ÄÌôò Ïã§Ìå® Í∞ÄÎä•ÏÑ±.")
        else:
            print("‚ùå Ïã¨Í∞Å: WAV ÌååÏùºÏù¥ Î≥ÄÌôò ÏôÑÎ£å Î©îÏãúÏßÄÏóêÎèÑ Î∂àÍµ¨ÌïòÍ≥† Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
        
       # --- ÌååÏùºÏù¥ Îã§Î•∏ ÌîÑÎ°úÏÑ∏Ïä§Ïóê ÏùòÌï¥ Ïû†Í≤®ÏûàÏßÄ ÏïäÏùÄÏßÄ ÌôïÏù∏ÌïòÎ©∞ ÎåÄÍ∏∞ ---
        # ÏµúÎåÄ 30Ï¥à ÎèôÏïà 0.5Ï¥à Í∞ÑÍ≤©ÏúºÎ°ú ÌååÏùº Ï†ëÍ∑º Í∞ÄÎä• Ïó¨Î∂Ä ÏãúÎèÑ
        max_retries = 60 # 0.5Ï¥à * 60 = 30Ï¥à
        retry_delay = 0.5 # 0.5Ï¥à
        file_ready = False
        for i in range(max_retries):
            try:
                # ÌååÏùºÏùÑ ÏùΩÍ∏∞ Î™®ÎìúÎ°ú Ïó¥Ïñ¥Î¥ÖÎãàÎã§. ÏÑ±Í≥µÌïòÎ©¥ ÌååÏùºÏù¥ Ïû†Í≤®ÏûàÏßÄ ÏïäÎã§Îäî ÏùòÎØ∏ÏûÖÎãàÎã§.
                with open(wav_path, 'rb') as f:
                    # ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÎäîÏßÄ ÌôïÏù∏ (ÏÑ†ÌÉù ÏÇ¨Ìï≠, Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÌÅ¨Í∏∞ ÌôïÏù∏ÌñàÏùå)
                    # if f.read(1): # ÏµúÏÜå 1Î∞îÏù¥Ìä∏ÎùºÎèÑ ÏùΩÏùÑ Ïàò ÏûàÎäîÏßÄ ÌôïÏù∏
                    pass # ÌååÏùºÏù¥ Ïó¥Î†∏ÏúºÎ©¥ OK
                file_ready = True
                print(f"‚úÖ WAV ÌååÏùº Ï†ëÍ∑º Í∞ÄÎä• ÌôïÏù∏ (ÏãúÎèÑ {i+1}Ìöå).")
                break
            except IOError as e:
                print(f"‚è≥ WAV ÌååÏùº Ïû†ÍπÄ ÎòêÎäî Ï†ëÍ∑º Î∂àÍ∞Ä (ÏãúÎèÑ {i+1}Ìöå): {e}. Ïû¨ÏãúÎèÑ...")
                await asyncio.sleep(retry_delay)
            except Exception as e:
                print(f"‚ùå WAV ÌååÏùº Ï†ëÍ∑º Ï§ë ÏòàÍ∏∞Ïπò ÏïäÏùÄ Ïò§Î•ò: {e}")
                break # Îã§Î•∏ ÏòàÏô∏ Î∞úÏÉù Ïãú Î£®ÌîÑ Ï¢ÖÎ£å

        if not file_ready:
            raise Exception(f"WAV ÌååÏùº '{wav_path}'Ïù¥(Í∞Ä) ÏßÄÏ†ïÎêú ÏãúÍ∞Ñ ÎÇ¥Ïóê Ï†ëÍ∑º Í∞ÄÎä•Ìï¥ÏßÄÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÌååÏùº Ïû†Í∏à ÎòêÎäî Í∂åÌïú Î¨∏Ï†úÏùº Ïàò ÏûàÏäµÎãàÎã§.")
        # --- ÌååÏùº Ï†ëÍ∑º Í∞ÄÎä• ÌôïÏù∏ Î°úÏßÅ ÎÅù ---
        
        normalized_wav_path = os.path.normpath(wav_path)
        
        # 3. Whisper Î™®Îç∏Î°ú STT Î≥ÄÌôò (Î∏îÎ°úÌÇπ ÏûëÏóÖÏù¥ÎØÄÎ°ú anyio.to_thread.run_sync ÏÇ¨Ïö©)
        print("üó£Ô∏è Whisper STT Î≥ÄÌôò ÏãúÏûë")
        stt_result = await anyio.to_thread.run_sync(model.transcribe, normalized_wav_path) # <--- Ïó¨Í∏∞ÏÑú anyio ÏÇ¨Ïö©
        print(f"‚úÖ Whisper STT Î≥ÄÌôò ÏôÑÎ£å: {stt_result['text'][:100]}...")

        # 4. ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú (ÏÑ†ÌÉù ÏÇ¨Ìï≠)
        # os.remove(webm_path)
        # os.remove(wav_path)
        # print(f"üßπ ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å: {webm_path}, {wav_path}")

        return {"text": stt_result["text"]}
    except subprocess.CalledProcessError as e:
        print(f"‚ùå FFmpeg Î≥ÄÌôò Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        # ... (Í∏∞Ï°¥ Ïò§Î•ò Ï≤òÎ¶¨ Î°úÏßÅ Ïú†ÏßÄ) ...
        if os.path.exists(webm_path): os.remove(webm_path)
        if os.path.exists(wav_path): os.remove(wav_path)
        return {"error": f"Ïò§ÎîîÏò§ Î≥ÄÌôò Ïò§Î•ò: {e.stderr.strip()}"}
    except Exception as e:
        print(f"‚ùå ÏòàÍ∏∞Ïπò ÏïäÏùÄ Ïò§Î•ò Î∞úÏÉù: {e}")
        # ... (Í∏∞Ï°¥ Ïò§Î•ò Ï≤òÎ¶¨ Î°úÏßÅ Ïú†ÏßÄ) ...
        if os.path.exists(webm_path): os.remove(webm_path)
        if os.path.exists(wav_path): os.remove(wav_path)
        return {"error": f"ÏÑúÎ≤Ñ Ï≤òÎ¶¨ Ïò§Î•ò: {str(e)}"}